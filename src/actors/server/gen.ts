// generate a file actors.gen.ts based on the specified actors folder
// it contains the generated code for the actors in the folder
// and generates an entrypoint that runs Deno.serve with actor runtime without dynamic imports. useful for caching purposes and run.

import { dirname, fromFileUrl, join } from "@std/path";
import * as fs from "node:fs/promises";
import process from "node:process";

if (import.meta.main) {
  const __dirname = dirname(fromFileUrl(import.meta.url)); // get the name of the directory
  const actorsFolder = process.argv[0] ?? join(__dirname, "actors");
  const basedir = dirname(actorsFolder);

  const imports = [];
  for (const dirEntry of await fs.readdir(actorsFolder)) {
    const stat = await fs.stat(dirEntry);
    if (
      stat.isFile() && dirEntry.endsWith(".ts") ||
      dirEntry.endsWith(".tsx")
    ) {
      imports.push(
        `await import("${
          join(actorsFolder, dirEntry)
        }").then(mod => (mod as { default?: ActorConstructor })?.default)`,
      );
    }
  }
  await fs.writeFile(
    join(basedir, "actors.gen.ts"),
    `
  // DO NOT EDIT THIS FILE IT WAS GENERATED BY ACTORS GEN
  import { type ActorConstructor, ActorRuntime } from "@deco/actors";
  const actors: ActorConstructor[] = [${
      imports.join(",")
    }].filter((actor) => actor?.name !== undefined);\n
  Deno.serve(new ActorRuntime(actors));\n`,
    { encoding: "utf-8" },
  );
}
